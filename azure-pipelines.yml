# Maven pipeline con SonarQube (Community Edition)
# Escanea c칩digo Java y ejecuta an치lisis est치tico en la rama principal

trigger:
- main  # o usa "main" si esa es tu rama principal

pool:
  vmImage: 'ubuntu-latest'

steps:
# 游댳 Paso 1: Preparar an치lisis de SonarQube
- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'Veganimo'   # 游녣 Aseg칰rate de que coincida EXACTAMENTE con el nombre del Service Connection
    scannerMode: 'Other'
    configMode: 'manual'
    cliProjectKey: 'Veganimo_Veganimo_df0f75ee-e17c-41a0-9241-828eda13ff43'     # 游녣 Cambia por tu clave de proyecto SonarQube
    cliProjectName: 'Veganimo'
    cliSources: '.'                      # Escanear치 todo el c칩digo fuente actual

# 游댳 Paso 2: Compilar y analizar con Maven
- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'clean verify sonar:sonar'    # Ejecuta build + an치lisis Sonar
    options: >
      -Dsonar.projectKey=proyecto-prueba
      -Dsonar.host.url=http://localhost:9000
      -Dsonar.login=$(SONAR_TOKEN)       # Usa variable secreta
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.17'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'

# 游댳 Paso 3: Publicar resultados de pruebas (JUnit)
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    failTaskOnFailedTests: true
